{
    "name": "df_transformation",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "ds_sales_blob_csv",
                        "type": "DatasetReference"
                    },
                    "name": "SalesTBL"
                },
                {
                    "dataset": {
                        "referenceName": "ds_sales_blob_csv",
                        "type": "DatasetReference"
                    },
                    "name": "StateCityTBL"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "df_processed_parquet",
                        "type": "DatasetReference"
                    },
                    "name": "SalesSink"
                },
                {
                    "dataset": {
                        "referenceName": "ds_processed_sales",
                        "type": "DatasetReference"
                    },
                    "name": "ProcessedSink"
                }
            ],
            "transformations": [
                {
                    "name": "FilterPayPalandGenderOnly"
                },
                {
                    "name": "SelectOnlyRequiredFields"
                },
                {
                    "name": "PivotGenderandProductCategory"
                },
                {
                    "name": "GenderDerived"
                },
                {
                    "name": "LookupCountry"
                },
                {
                    "name": "AggStateCity"
                },
                {
                    "name": "SelectForSink"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          {Row ID} as integer,",
                "          {Order ID} as string,",
                "          {Order Date} as timestamp,",
                "          {Ship Date} as timestamp,",
                "          {Ship Mode} as string,",
                "          {Customer ID} as string,",
                "          {Customer Name} as string,",
                "          {Customer Gender} as string,",
                "          {Customer Age} as integer,",
                "          {Customer Loyalty Tier} as string,",
                "          CLV as double,",
                "          Segment as string,",
                "          Country as string,",
                "          City as string,",
                "          State as string,",
                "          {Postal Code} as integer,",
                "          Latitude as double,",
                "          Longitude as double,",
                "          Region as string,",
                "          {Product ID} as string,",
                "          Category as string,",
                "          {Sub-Category} as string,",
                "          {Product Name} as string,",
                "          Sales as double,",
                "          Cost as double,",
                "          Profit as double,",
                "          Quantity as integer,",
                "          Discount as double,",
                "          Manufacturer as string,",
                "          {Payment Method} as string,",
                "          {Order Priority} as string,",
                "          {Return Status} as boolean,",
                "          {Return Reason} as string,",
                "          {Shipping Cost} as double,",
                "          Carrier as string,",
                "          {Customer Since} as date,",
                "          {Create Date} as timestamp,",
                "          {Modification Date} as timestamp",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: true,",
                "     ignoreNoFilesFound: false,",
                "     partitionBy('roundRobin', 2)) ~> SalesTBL",
                "source(output(",
                "          {Row ID} as string,",
                "          {Order ID} as string,",
                "          {Order Date} as string,",
                "          {Ship Date} as string,",
                "          {Ship Mode} as string,",
                "          {Customer ID} as string,",
                "          {Customer Name} as string,",
                "          {Customer Gender} as string,",
                "          {Customer Age} as string,",
                "          {Customer Loyalty Tier} as string,",
                "          CLV as string,",
                "          Segment as string,",
                "          Country as string,",
                "          City as string,",
                "          State as string,",
                "          {Postal Code} as string,",
                "          Latitude as string,",
                "          Longitude as string,",
                "          Region as string,",
                "          {Product ID} as string,",
                "          Category as string,",
                "          {Sub-Category} as string,",
                "          {Product Name} as string,",
                "          Sales as string,",
                "          Cost as string,",
                "          Profit as string,",
                "          Quantity as string,",
                "          Discount as string,",
                "          Manufacturer as string,",
                "          {Payment Method} as string,",
                "          {Order Priority} as string,",
                "          {Return Status} as string,",
                "          {Return Reason} as string,",
                "          {Shipping Cost} as string,",
                "          Carrier as string,",
                "          {Customer Since} as string,",
                "          {Create Date} as string,",
                "          {Modification Date} as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: true,",
                "     ignoreNoFilesFound: false) ~> StateCityTBL",
                "SalesTBL filter({Payment Method} == 'PayPal' && {Customer Gender} != 'Other') ~> FilterPayPalandGenderOnly",
                "FilterPayPalandGenderOnly select(mapColumn(",
                "          each(match(name!='Payment Method'),",
                "               replace($$,' ','_') = $$)",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelectOnlyRequiredFields",
                "SelectForSink pivot(groupBy(Category),",
                "     pivotBy(Customer_Gender, ['Male', 'Female']),",
                "     Total_ = sum(Sales),",
                "     columnNaming: '$N$V',",
                "     lateral: true) ~> PivotGenderandProductCategory",
                "SelectOnlyRequiredFields derive(Customer_Gender = iif(Customer_Gender == 'M', 'Male', iif(Customer_Gender == 'F', 'Female', Customer_Gender))) ~> GenderDerived",
                "GenderDerived, AggStateCity lookup(SelectOnlyRequiredFields@State == AggStateCity@State,",
                "     multiple: false,",
                "     pickup: 'any',",
                "     broadcast: 'auto')~> LookupCountry",
                "StateCityTBL aggregate(groupBy(State,",
                "          City),",
                "     dummy = first(State)) ~> AggStateCity",
                "LookupCountry select(mapColumn(",
                "          Row_ID,",
                "          Order_ID,",
                "          Order_Date,",
                "          Ship_Date,",
                "          Ship_Mode,",
                "          Customer_ID,",
                "          Customer_Name,",
                "          Customer_Gender,",
                "          Customer_Age,",
                "          Customer_Loyalty_Tier,",
                "          CLV,",
                "          Segment,",
                "          Country,",
                "          City = AggStateCity@City,",
                "          State = AggStateCity@State,",
                "          Postal_Code,",
                "          Latitude,",
                "          Longitude,",
                "          Region,",
                "          Product_ID,",
                "          Category,",
                "          {Sub-Category},",
                "          Product_Name,",
                "          Sales,",
                "          Cost,",
                "          Profit,",
                "          Quantity,",
                "          Discount,",
                "          Manufacturer,",
                "          Order_Priority,",
                "          Return_Status,",
                "          Return_Reason,",
                "          Shipping_Cost,",
                "          Carrier,",
                "          Customer_Since,",
                "          Create_Date,",
                "          Modification_Date",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelectForSink",
                "SelectForSink sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'parquet',",
                "     partitionFileNames:['sales_parquet'],",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> SalesSink",
                "SelectForSink sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     partitionFileNames:['sales_csv'],",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> ProcessedSink"
            ]
        }
    }
}